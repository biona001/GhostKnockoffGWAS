var documenterSearchIndex = {"docs":
[{"location":"man/FAQ/#Common-questions-and-Answers","page":"FAQ","title":"Common questions and Answers","text":"","category":"section"},{"location":"man/FAQ/","page":"FAQ","title":"FAQ","text":"Here is a collection of common questions & answers. If you have a question not listed here, do not hesitate to open a new issue on Github. ","category":"page"},{"location":"man/FAQ/#How-to-handle-missing-data?","page":"FAQ","title":"How to handle missing data?","text":"","category":"section"},{"location":"man/FAQ/#Memory-requirement?","page":"FAQ","title":"Memory requirement?","text":"","category":"section"},{"location":"man/developer/#Developer-documentation","page":"Developer documentation","title":"Developer documentation","text":"","category":"section"},{"location":"man/developer/","page":"Developer documentation","title":"Developer documentation","text":"This is for advanced users who wishes to build customized knockoff analysis pipelines. This is separated into 2 parts. If you would like assistance on any of these steps, feel free to reach out to us. ","category":"page"},{"location":"man/developer/#Constructing-knockoff-statistics-for-custom-LD-panels","page":"Developer documentation","title":"Constructing knockoff statistics for custom LD panels","text":"","category":"section"},{"location":"man/developer/","page":"Developer documentation","title":"Developer documentation","text":"Processing of LD panels (including downloading and importing the data matrices) is carried out by EasyLD.jl. This package should make it easy to import a region of the LD matrix into memory in Julia.\nTo partition the extremely large LD matrix into manageable pieces, we directly adopted the output of ldetect for which AFR (african), ASN (east Asians), and EUR (european) results are already available (position coordinates are given in HG19). \nKnockoff optimization problem was carried out by Knockoffs.jl.","category":"page"},{"location":"man/developer/","page":"Developer documentation","title":"Developer documentation","text":"Because pre-computed knockoff statistics are available for download, users do not have to manually install EasyLD.jl nor Knockoffs.jl to carry out this step.","category":"page"},{"location":"man/developer/#Using-GhostKnockoffGWAS-as-a-Julia-package","page":"Developer documentation","title":"Using GhostKnockoffGWAS as a Julia package","text":"","category":"section"},{"location":"man/developer/","page":"Developer documentation","title":"Developer documentation","text":"GhostKnockoffGWAS is a regular Julia package, which can be used directly within Julia for greater flexibility. To install it, execute the following in Julia","category":"page"},{"location":"man/developer/","page":"Developer documentation","title":"Developer documentation","text":"using Pkg\nPkg.add(url=\"https://github.com/biona001/ghostbasil_jll.jl\")\nPkg.add(url=\"https://github.com/biona001/Ghostbasil.jl\")\nPkg.add(url=\"https://github.com/biona001/GhostKnockoffGWAS\")","category":"page"},{"location":"man/developer/","page":"Developer documentation","title":"Developer documentation","text":"warning: Warning\nThis package currently only works on Julia 1.8.x and 1.9.x. If you need it to work on a different Julia version, let us know by filing an issue on Github. ","category":"page"},{"location":"man/developer/#Julia-API","page":"Developer documentation","title":"Julia API","text":"","category":"section"},{"location":"man/developer/","page":"Developer documentation","title":"Developer documentation","text":"Modules = [GhostKnockoffGWAS]\nOrder   = [:function, :type]","category":"page"},{"location":"man/developer/#GhostKnockoffGWAS.find_matching_indices-Tuple{AbstractVector, AbstractVector}","page":"Developer documentation","title":"GhostKnockoffGWAS.find_matching_indices","text":"find_matching_indices(a, b)\n\nReturns output vector c such that c[i] contains all indices of b that  matches a[i]. Generalizes indexin in Base. \n\nExample\n\na = [1, 2, 3, 2, 6]\nb = [2, 1, 2, 4, 3]\nc = find_matching_indices(a, b)\nprintln(c)  # Output: [[2], [1, 3], [5], [1, 3], Int[]]\n\n\n\n\n\n","category":"method"},{"location":"man/developer/#GhostKnockoffGWAS.ghost_knockoffs-Union{Tuple{T}, Tuple{AbstractVector{T}, AbstractMatrix{T}, AbstractMatrix{T}}} where T","page":"Developer documentation","title":"GhostKnockoffGWAS.ghost_knockoffs","text":"ghost_knockoffs(Zscores, D, Σinv; [m=1])\n\nGenerate Ghost knockoffs given a list of z-scores (GWAS summary statistic). \n\nInputs\n\nZscores: List of z-score statistics\nD: Matrix obtained from solving the knockoff problem satisfying    (m+1)/m*Σ - D ⪰ 0\nΣinv: Inverse of the covariance matrix\n\noptional inputs\n\nm: Number of knockoffs\n\nReference\n\nHe, Z., Liu, L., Belloy, M. E., Le Guen, Y., Sossin, A., Liu, X., ... & Ionita-Laza, I. (2021).  Summary statistics knockoff inference empowers identification of putative causal variants in  genome-wide association studies. \n\nSource: https://github.com/biona001/Knockoffs.jl/blob/master/src/ghost.jl#L32\n\n\n\n\n\n","category":"method"},{"location":"man/developer/#GhostKnockoffGWAS.read_zscores-Tuple{String}","page":"Developer documentation","title":"GhostKnockoffGWAS.read_zscores","text":"read_zscores(filepath::String)\n\nHelper function to read a Z-score file. First row must be a header column with  CHR, POS, REF, ALT, and Z. All other columns will be ignored. \n\ntodo: detect duplicate SNPs\n\n\n\n\n\n","category":"method"},{"location":"man/developer/#GhostKnockoffGWAS.sample_mvn_efficient-Union{Tuple{T}, Tuple{AbstractMatrix{T}, AbstractMatrix{T}, Int64}} where T","page":"Developer documentation","title":"GhostKnockoffGWAS.sample_mvn_efficient","text":"sample_mvn_efficient(C::AbstractMatrix{T}, D::AbstractMatrix{T}, m::Int)\n\nEfficiently samples from N(0, A) where\n\nbeginaligned\nA = beginpmatrix\n    C  C-D  cdots  C-D\n    C-D  C  cdots  C-D\n    vdots   ddots  vdots\n    C-D  C-D   C\nendpmatrix\nendaligned\n\nNote there are m blocks per row/col\n\nSource: https://github.com/biona001/Knockoffs.jl/blob/master/src/ghost.jl#L60\n\n\n\n\n\n","category":"method"},{"location":"man/developer/#Compiling-the-binaries","page":"Developer documentation","title":"Compiling the binaries","text":"","category":"section"},{"location":"man/developer/","page":"Developer documentation","title":"Developer documentation","text":"Make sure gcc is available. We recommend version 7.1, but avoid using GCC 11+.\nMake sure GhostKnockoffGWAS is installed within Julia. \ndev the package via","category":"page"},{"location":"man/developer/","page":"Developer documentation","title":"Developer documentation","text":"]dev GhostKnockoffGWAS","category":"page"},{"location":"man/developer/","page":"Developer documentation","title":"Developer documentation","text":"compile using PackageCompiler.jl","category":"page"},{"location":"man/developer/","page":"Developer documentation","title":"Developer documentation","text":"using PackageCompiler, GhostKnockoffGWAS\nsrc = normpath(pathof(GhostKnockoffGWAS), \"../..\")\ndes = normpath(pathof(GhostKnockoffGWAS), \"../../app_linux_x86\")\n@time create_app(src, des, include_lazy_artifacts=true, force=true)","category":"page"},{"location":"man/developer/","page":"Developer documentation","title":"Developer documentation","text":"The last step takes 1-2 hours. ","category":"page"},{"location":"man/getting_started/#Getting-started-with-Ghost-Knockoff-GWAS-analysis","page":"Getting started","title":"Getting started with Ghost Knockoff GWAS analysis","text":"","category":"section"},{"location":"man/getting_started/","page":"Getting started","title":"Getting started","text":"This tutorial is for generating Ghost Knockoffs for analyzing summary statistics from a genome-wide association studies (GWAS). The methodology is described in the following papers","category":"page"},{"location":"man/getting_started/","page":"Getting started","title":"Getting started","text":"He Z, Liu L, Belloy ME, Le Guen Y, Sossin A, Liu X, Qi X, Ma S, Gyawali PK, Wyss-Coray T, Tang H. GhostKnockoff inference empowers identification of putative causal variants in genome-wide association studies. Nature Communications. 2022 Nov 23;13(1):7209.","category":"page"},{"location":"man/getting_started/","page":"Getting started","title":"Getting started","text":"The main working assumption is that we do not have access to individual level genotype or phenotype data. Rather, for each SNP, we have","category":"page"},{"location":"man/getting_started/","page":"Getting started","title":"Getting started","text":"Z-scores Z_j with respect to some phenotype from a GWAS, and\nAccess to LD (linkage disequilibrium) matrix","category":"page"},{"location":"man/getting_started/#Typical-Workflow","page":"Getting started","title":"Typical Workflow","text":"","category":"section"},{"location":"man/getting_started/","page":"Getting started","title":"Getting started","text":"Most users are expected to follow this workflow. For advanced users, see Developer documentation.","category":"page"},{"location":"man/getting_started/","page":"Getting started","title":"Getting started","text":"Download the binary executable file (XXX GB)\nDownload the pre-computed knockoff statistics (8.2GB)\nUnzip both datasets\nPrepare your input Z score file into accepted format, see Acceptable Z-scores below. \nRun the executable, see running the executable","category":"page"},{"location":"man/getting_started/#Running-the-executable","page":"Getting started","title":"Running the executable","text":"","category":"section"},{"location":"man/getting_started/","page":"Getting started","title":"Getting started","text":"To see required inputs (and optional inputs), invoke","category":"page"},{"location":"man/getting_started/","page":"Getting started","title":"Getting started","text":"$ ./GhostKnockoffGWAS --help\n\nusage: <PROGRAM> [--genome-build GENOME-BUILD] [--m M] [--seed SEED]\n                 [-h] zfile knockoff_dir Neffect out\n\npositional arguments:\n  zfile                 Tab or comma separated summary Z-score file.\n                        The first row must be a header line that\n                        contains CHR/POS/REF/ALT fields, as well as\n                        something that indicates Z-score information.\n                        CHR must be integer valued (e.g. chr21 is not\n                        correct). If a column with `Z` is available,\n                        it will be used as Z scores. Otherwise, we\n                        need both `pvalue` and `beta` to be available,\n                        or both `OR` (odds ratio) and `SE` (standard\n                        error) to be available. In these cases, we\n                        will convert them to Z scores.\n  knockoff_dir          Path to the directory storing pre-processed\n                        knockoff files\n  Neffect               Effective sample size for original data (type:\n                        Int64)\n  out                   Output file prefix (without extensions)\n\noptional arguments:\n  --genome-build GENOME-BUILD\n                        Specifies the human genome build for the\n                        summary file. Must be 19 (hg19) or 38 (hg38).\n                        (type: Int64, default: 38)\n  --m M                 Number of knockoffs to generate (type: Int64,\n                        default: 5)\n  --seed SEED           Sets the random seed (type: Int64, default:\n                        2023)\n  -h, --help            show this help message and exit","category":"page"},{"location":"man/getting_started/","page":"Getting started","title":"Getting started","text":"Example run:","category":"page"},{"location":"man/getting_started/","page":"Getting started","title":"Getting started","text":"./GhostKnockoffGWAS \\\n    ../../data/AD_Zscores_Meta_modified.txt \\\n    ../../data/EUR \\\n    506200 \\\n    ../../data/test_alzheimers_meta","category":"page"},{"location":"man/getting_started/#Acceptable-Z-scores-format","page":"Getting started","title":"Acceptable Z-scores format","text":"","category":"section"},{"location":"man/getting_started/","page":"Getting started","title":"Getting started","text":"The Z score file should satisfy the following requirements:","category":"page"},{"location":"man/getting_started/","page":"Getting started","title":"Getting started","text":"It is a comma- or tab-separated file\nThe first row should be a header line\nThe header line should include CHR, POS, REF, ALT. The ALT allele will be treated as the effect allele and REF be treated as non-effect allele. The position of each variant must be from HG19 or HG38.\nZ scores can be given in 3 ways\nIf a column with the header Z exist, then it will be used as Z scores.\nIf pvalue and beta (effect size) columns both exist, we will transform them into Z scores\nIf OR (odds ratio) and SE (standard error) columns exist, they will be transformed into Z scores","category":"page"},{"location":"man/examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"man/examples/","page":"Examples","title":"Examples","text":"This page collect examples of running the ghost knockoff pipeline. We will cover topics such as installation, examining input data, running the software, and visualizing the output. ","category":"page"},{"location":"#GWAS-summary-statistics-analysis-via-Knockoff-filter","page":"Home","title":"GWAS summary statistics analysis via Knockoff-filter","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This is package for performing knockoff-based analysis of GWAS summary statistics. The knockoff-filter finds conditionally independent discoveries while controlling the FDR (false discovery rate) to any specified level. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"warning: Warning\nThis package currently only works on Linux platforms with aarch64 or x86_64 CPUs. We plan to support mac (x86_64 and aarch64) in the near future, but not for windows. ","category":"page"}]
}
