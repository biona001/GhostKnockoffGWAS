var documenterSearchIndex = {"docs":
[{"location":"man/FAQ/#Common-questions-and-Answers","page":"FAQ","title":"Common questions and Answers","text":"","category":"section"},{"location":"man/FAQ/","page":"FAQ","title":"FAQ","text":"Here is a collection of common questions & answers. If you have a question not listed here, do not hesitate to open a new issue on Github. ","category":"page"},{"location":"man/FAQ/#How-do-I-obtain-Z-scores-from-p-values,-effect-sizes,-odds-ratios...etc?","page":"FAQ","title":"How do I obtain Z-scores from p-values, effect sizes, odds-ratios...etc?","text":"","category":"section"},{"location":"man/FAQ/","page":"FAQ","title":"FAQ","text":"See the Notes on computing Z-scores section of this blog post","category":"page"},{"location":"man/FAQ/#Is-the-result-is-trustworthy?","page":"FAQ","title":"Is the result is trustworthy?","text":"","category":"section"},{"location":"man/FAQ/","page":"FAQ","title":"FAQ","text":"Knockoff's FDR guarantees requires that the correlation matrices used in the analysis approximates the LD structure for the original GWAS study. Their consistency is measured by the mean_LD_shrinkage parameter in the summary output. This value lies between 0 and 1. Values close to 0 indicates good performance. Larger values (e.g. >0.1) indicates deviation. Very larger values (e.g. >0.25) will cause the program to hault and users should download a different set of precomputed knockoff data instead. See equation 24 of the SuSiE paper for details. ","category":"page"},{"location":"man/FAQ/#Expected-run-time?","page":"FAQ","title":"Expected run time?","text":"","category":"section"},{"location":"man/FAQ/","page":"FAQ","title":"FAQ","text":"On roughly 0.6 million Z-scores, our software completed a GhostKnockoff analysis in roughly 15 minutes on a single 2.3GHz CPU. If your analysis is taking much longer than this, please see Q&A on software unexpectedly slow.","category":"page"},{"location":"man/FAQ/#Memory-requirement?","page":"FAQ","title":"Memory requirement?","text":"","category":"section"},{"location":"man/FAQ/","page":"FAQ","title":"FAQ","text":"Our software requires ~9.1GB of RAM on an Alzheimer's Diseases anslysis with ~0.6 million SNPs. ","category":"page"},{"location":"man/FAQ/#Software-unexpectedly-slow?","page":"FAQ","title":"Software unexpectedly slow?","text":"","category":"section"},{"location":"man/FAQ/","page":"FAQ","title":"FAQ","text":"Because the knockoff pipeline requires reading the pre-computed knockoff statistics sequentially into memory, both the downloaded software and data should be stored at a high speed (e.g. Lustre) file system. On most HPC clusters, one should store the data in the SCRATCH directory to run GhostKnockoffGWAS. ","category":"page"},{"location":"man/FAQ/","page":"FAQ","title":"FAQ","text":"To check whether I/O is the bottleneck, one can check the CPU usage while GhostKnockoffGWAS is running. For example, one can examine CPU usage via the top or htop command. CPU usage should almost always be at 99% or above.  ","category":"page"},{"location":"man/FAQ/","page":"FAQ","title":"FAQ","text":"For undiagnosed performance issues, please file a new issue. ","category":"page"},{"location":"man/FAQ/#Sex-chromosome-support?","page":"FAQ","title":"Sex chromosome support?","text":"","category":"section"},{"location":"man/FAQ/","page":"FAQ","title":"FAQ","text":"We currently do not support X/Y/M chromosome analysis.","category":"page"},{"location":"man/FAQ/#When-will-non-European-LD-files-be-available?","page":"FAQ","title":"When will non-European LD files be available?","text":"","category":"section"},{"location":"man/FAQ/","page":"FAQ","title":"FAQ","text":"We will release more pre-processed LD files for download, once we tested and verified the methodology against suitable datasets. Most likely, the first non-EUR release will be on African and East Asian populations. ","category":"page"},{"location":"man/FAQ/#Admixed-samples?","page":"FAQ","title":"Admixed samples?","text":"","category":"section"},{"location":"man/FAQ/","page":"FAQ","title":"FAQ","text":"If your study subjects are somewhat admixed, one can try GhostKnockoffGWAS with the most suitable LD files, then check how much deviation there are by examining the LD_shrinkage parameter in the output of GhostKnockoffGWAS, see Is-the-result-is-trustworthy?.","category":"page"},{"location":"man/FAQ/","page":"FAQ","title":"FAQ","text":"If your study subjects are extremely admixed, then it is unlikely that GhostKnockoffGWAS will return good results. The main difficulty in enabling analysis for admixed cohorts lies in pre-computing good LD files for admixed subjects. Computing required quantities on the fly is too computationally intensive. ","category":"page"},{"location":"man/FAQ/#How-do-I-specify-my-own-groups?","page":"FAQ","title":"How do I specify my own groups?","text":"","category":"section"},{"location":"man/FAQ/","page":"FAQ","title":"FAQ","text":"We will add this feature in the near future","category":"page"},{"location":"man/download/#Downloads-page","page":"Downloads","title":"Downloads page","text":"","category":"section"},{"location":"man/download/","page":"Downloads","title":"Downloads","text":"Here is the main downloads page. New software and pre-processed knockoff data will be released here.","category":"page"},{"location":"man/download/#Software","page":"Downloads","title":"Software","text":"","category":"section"},{"location":"man/download/","page":"Downloads","title":"Downloads","text":"Operating System v0.0.1 (24 Jan, 2024)\nLinux 64-bit Download (XXXGB)","category":"page"},{"location":"man/download/","page":"Downloads","title":"Downloads","text":"After unzipping, the executable will be located inside bin/GhostKnockoffGWAS. We recommend adding the folder containing the GhostKnockoffGWAS executable to PATH for easier access.","category":"page"},{"location":"man/download/#Pre-processed-LD-files","page":"Downloads","title":"Pre-processed LD files","text":"","category":"section"},{"location":"man/download/","page":"Downloads","title":"Downloads","text":"Population Link Number of SNPs Description\nEUR (Europeans) download (8.2GB) 650826 See Note 1\nASN (East Asians) TBD  \nAFR (Africans) TBD  \nAMR (Admixed Americans) TBD  ","category":"page"},{"location":"man/download/","page":"Downloads","title":"Downloads","text":"Note 1: This file contain pre-processed LD files generated from the typed SNPs of the EUR cohort from the Pan-UKB panel. The quasi-independent regions were obtained by directly adapting the output of ldetect","category":"page"},{"location":"man/developer/#Developer-documentation","page":"Developer documentation","title":"Developer documentation","text":"","category":"section"},{"location":"man/developer/","page":"Developer documentation","title":"Developer documentation","text":"This is for advanced users who wish to build customized knockoff analysis pipelines. Currently, customization is not easy, but it is possible in principle at 2 levels: ","category":"page"},{"location":"man/developer/","page":"Developer documentation","title":"Developer documentation","text":"Processing LD panels\nSpecifying which LD panel to use\nDefining quasi-independent regions and groups\nSolving the knockoff (convex) optimization problem\nSaving the result in a easy-to-read format, which will be read in step 2\nGhost Knockoff sampling and high dimensional Lasso regression\nRead pre-computed knockoff statistics from step 1\nSample Ghost Knockoffs\nFit a pseudo-lasso problem\nApplying the knockoff filter","category":"page"},{"location":"man/developer/","page":"Developer documentation","title":"Developer documentation","text":"A full example is provided in 3 separate jupyter notebooks: part 0, part 1, and part 2. If you need assistance on any of these steps, feel free to reach out to us. ","category":"page"},{"location":"man/developer/#1.-Processing-LD-panels","page":"Developer documentation","title":"1. Processing LD panels","text":"","category":"section"},{"location":"man/developer/","page":"Developer documentation","title":"Developer documentation","text":"This section gives a high-level overview up to part 1 of the GhostKnockoff pipeline (processing of LD files to be used as input to GhostKnockoffGWAS). ","category":"page"},{"location":"man/developer/","page":"Developer documentation","title":"Developer documentation","text":"Processing of LD panels (including downloading and importing the data matrices) is carried out by EasyLD.jl. This package should make it easy to import a region of the LD matrix into memory in Julia. \nTo partition the extremely large LD matrix into manageable pieces, we directly adopted the output of ldetect for which AFR (african), ASN (east Asians), and EUR (european) results are already available (position coordinates are given in HG19). For the EUR panel, the autosomes are partitioned into 1703 \"quasi-independent\" regions, see Figure S2 of this paper for summaries. \nKnockoff optimization problem was carried out by Knockoffs.jl. In particular, we defined groups via average-linkage hierarchical clustering, chose group-key variants within each group via Algorithm A1 in the paper with threshold value c=05, and employed the maximum-entropy group-knockoff solver.","category":"page"},{"location":"man/developer/","page":"Developer documentation","title":"Developer documentation","text":"For details, please see section 5.1 and 5.2 of this paper. Note that the precomputed knockoff statistics includes everything up to this point. ","category":"page"},{"location":"man/developer/#2.-Ghost-Knockoff-sampling-and-high-dimensional-Lasso-regression","page":"Developer documentation","title":"2. Ghost Knockoff sampling and high dimensional Lasso regression","text":"","category":"section"},{"location":"man/developer/","page":"Developer documentation","title":"Developer documentation","text":"Over 1703 quasi-independent blocks, we have assembled","category":"page"},{"location":"man/developer/","page":"Developer documentation","title":"Developer documentation","text":"beginaligned\n    Sigma =\n    beginbmatrix\n        Sigma_1   \n         ddots  \n          Sigma_1703\n    endbmatrix quad\n    S = \n    beginbmatrix\n        S_1   \n         ddots  \n          S_1703\n    endbmatrix quad\n    S_i = \n    beginbmatrix\n        S_i1   \n         ddots  \n          S_iG_i\n    endbmatrix\nendaligned","category":"page"},{"location":"man/developer/","page":"Developer documentation","title":"Developer documentation","text":"where Sigma_i are LD matrices obtained from the Pan-UKBB panel and S_i is the group-block-diagonal matrices obtained by solving the knockoff optimization problem. Given a Z-score vector z, we can compute r = frac1sqrtn z, and ghostbasil will solve the following optimization problem with lambda ge 0 p_i ge 0, and 0 le alpha le 1.","category":"page"},{"location":"man/developer/","page":"Developer documentation","title":"Developer documentation","text":"beginaligned\n    min frac12beta^t A beta - beta^tr + lambdasum_ip_ileft(alphabeta_i + frac1-alpha2beta_i^2right)\nendaligned","category":"page"},{"location":"man/developer/","page":"Developer documentation","title":"Developer documentation","text":"In GhostKnockoffGWAS, we set alpha = 1 (i.e. a Lasso problem) and p_i = 1 for all i. A = frac1nXtildeXXtildeX and beta contains the effect size for both original variables and their knockoffs. ","category":"page"},{"location":"man/developer/","page":"Developer documentation","title":"Developer documentation","text":"To solve this problem, we leverage the fact that Lasso's objective is seprable over the blocks: as long as we can find a lambda sequence to be used for all blocks, we can fit each block separately. Since the max lambda is only related to the marginal correlation between each feature and y, and the knockoffs are exchangeable to the original features, we can use the original genome-wide Z-scores to compute the lambda sequence. ","category":"page"},{"location":"man/developer/","page":"Developer documentation","title":"Developer documentation","text":"Thus, for each block i in 11703, we will call ghostbasil(Bi, r) where","category":"page"},{"location":"man/developer/","page":"Developer documentation","title":"Developer documentation","text":"beginaligned\n    B_i = textBlockGroupGhostMatrix(C_i S_i m+1)\n    C_i = Sigma_i - S_i\nendaligned  ","category":"page"},{"location":"man/developer/","page":"Developer documentation","title":"Developer documentation","text":"Note that, since we use representative variant approach, S_i is generally a dense matrix. To input a dense matrix, we use Jame's function BlockGroupGhostMatrix with a single block. ","category":"page"},{"location":"man/developer/","page":"Developer documentation","title":"Developer documentation","text":"beginaligned\n    B_i = textBlockGroupGhostMatrix(C_i S_i m+1) = \n    beginbmatrix\n        C_i+S_i  C_i    C_i\n        C_i  C_i+S_i    \n        vdots   ddots  vdots\n        C_i  C_i   C_i + S_i\n    endbmatrix\nendaligned","category":"page"},{"location":"man/developer/","page":"Developer documentation","title":"Developer documentation","text":"with the understanding that B_i is the covariance matrix for (Z tildeZ_1tildeZ_m)","category":"page"},{"location":"man/developer/","page":"Developer documentation","title":"Developer documentation","text":"beginaligned\n    B_i = \n    beginbmatrix\n        Sigma_i  Sigma_i-S_i    Sigma_i-S_i\n        Sigma_i-S_i  Sigma_i    \n        vdots   ddots  vdots\n        Sigma_i-S_i  Sigma_i-S_i   Sigma_i\n    endbmatrix = \n    beginbmatrix\n        C_i+S_i  C_i    C_i\n        C_i  C_i+S_i    \n        vdots   ddots  vdots\n        C_i  C_i   C_i + S_i\n    endbmatrix\nendaligned","category":"page"},{"location":"man/developer/","page":"Developer documentation","title":"Developer documentation","text":"where C_i = Sigma_i - S_i. In Julia, this functionality is supported via the Ghostbasil.jl package. ","category":"page"},{"location":"man/getting_started/#Getting-started-with-Ghost-Knockoff-GWAS-analysis","page":"Getting started","title":"Getting started with Ghost Knockoff GWAS analysis","text":"","category":"section"},{"location":"man/getting_started/","page":"Getting started","title":"Getting started","text":"This package is conducts knockoff-based inference to perform genome-wide conditional independent tests based on summary statistics (e.g. p-values). The methodology is described in the following papers","category":"page"},{"location":"man/getting_started/","page":"Getting started","title":"Getting started","text":"He Z, Chu BB, Yang J, Gu J, Chen Z, Liu L, Morrison T, Bellow M, Qi X, Hejazi N, Mathur M, Le Guen Y, Tang H, Hastie T, Ionita-laza, I, Sabatti C, Candes C. \"In silico identification of putative causal genetic variants\", bioRxiv 2024. ","category":"page"},{"location":"man/getting_started/","page":"Getting started","title":"Getting started","text":"The main working assumption is that we do not have access to individual level genotype or phenotype data. Rather, for each SNP, we have its Z-scores with respect to some phenotype from a GWAS, and access to LD (linkage disequilibrium) data. The user is expected supply the Z-scores, while we supply the LD data in addition to some pre-computed knockoff data.","category":"page"},{"location":"man/getting_started/#Q:-When-should-I-use-GhostKnockoffGWAS?","page":"Getting started","title":"Q: When should I use GhostKnockoffGWAS?","text":"","category":"section"},{"location":"man/getting_started/","page":"Getting started","title":"Getting started","text":"Answer: If you already conducted a GWAS, have an output file that includes Z scores (or equivalent) for each SNP, and there exist pre-processed LD files in downloads page in which the listed population matches the ethnicities for your original GWAS study.","category":"page"},{"location":"man/getting_started/","page":"Getting started","title":"Getting started","text":"If your original study had little (e.g. <5) discoveries, then GhostKnockoffGWAS may not give better results. The methodology works better for more polygenic traits. \nIf your study subjects are somewhat admixed, one can try using the most suitable LD files, and check how much deviation there are from the LD files by examining the LD_shrinkage parameter in the output of GhostKnockoffGWAS, see this FAQ.\nIf instead you have individual level genotypes, you should run a GWAS using standard tools (e.g. PLINK, BOLT, GCTA, SAIGE, GEMMA, ...etc) before running GhostKnockoffGWAS. ","category":"page"},{"location":"man/getting_started/#Typical-Workflow","page":"Getting started","title":"Typical Workflow","text":"","category":"section"},{"location":"man/getting_started/","page":"Getting started","title":"Getting started","text":"Most users are expected to follow this workflow. Those familiar with the Julia programming language can use GhostKnockoffGWAS as a regular julia package, see usage within Julia.","category":"page"},{"location":"man/getting_started/","page":"Getting started","title":"Getting started","text":"Go to Download Page and download (1) the binary executable file and (2) the pre-processed LD files.\nUnzip them\nPrepare your input Z score file into accepted format, see Acceptable Z-scores below. \nRun the executable, see running the executable","category":"page"},{"location":"man/getting_started/","page":"Getting started","title":"Getting started","text":"For a detailed example, see Detailed Example","category":"page"},{"location":"man/getting_started/#Running-the-executable","page":"Getting started","title":"Running the executable","text":"","category":"section"},{"location":"man/getting_started/","page":"Getting started","title":"Getting started","text":"See Detailed Examples for a analysis example. To see a list of available arguments, execute GhostKnockoffGWAS --help. Its output is:","category":"page"},{"location":"man/getting_started/","page":"Getting started","title":"Getting started","text":"usage: <PROGRAM> --zfile ZFILE --LD-files LD-FILES --N N\n                 --genome-build GENOME-BUILD --out OUT [--seed SEED]\n                 [--verbose VERBOSE]\n                 [--skip_shrinkage_check SKIP_SHRINKAGE_CHECK] [-h]\n\noptional arguments:\n  --zfile ZFILE         Tab or comma separated summary Z-score file,\n                        which can be .gz compressed. The first row\n                        must be a header line that contains at least\n                        CHR, POS, REF, ALT, and Z (other columns will\n                        be ignored). Each row should be a SNP. CHR is\n                        the chromosome column and must be integer\n                        valued (e.g. chr22, , sex chromosomes, and\n                        missing values are NOT valid). POS is the SNP\n                        (aligned to HG19 or HG38) and cannot be\n                        missing. REF the position of and ALT are the\n                        reference and alternate alleles, which will be\n                        treated as the non-effective and effect\n                        alleles, respectively, and also cannot be\n                        missing. Finally, Z is the Z-score column.\n                        Missing Z scores can be specified as NaN or as\n                        an empty cell.\n  --LD-files LD-FILES\n                        Path to the directory storing pre-processed\n                        knockoff files\n  --N N                 Sample size for target (original) study (type:\n                        Int64)\n  --genome-build GENOME-BUILD\n                        Specifies the human genome build for the\n                        target (original) study. Must be 19 (hg19) or\n                        38 (hg38). (type: Int64)\n  --out OUT             Output file prefix (without extensions)\n  --seed SEED           Sets the random seed (type: Int64, default:\n                        2023)\n  --verbose VERBOSE     Whether to print intermediate messages (type:\n                        Bool, default: true)\n  --skip_shrinkage_check SKIP_SHRINKAGE_CHECK\n                        Whether to allow Knockoff analysis to proceed\n                        even with large (>0.25) LD shrinkages. Only\n                        use this option if you know what you are\n                        doing.  (type: Bool, default: true)\n  -h, --help            show this help message and exit","category":"page"},{"location":"man/julia/#Usage-within-Julia","page":"Usage within Julia","title":"Usage within Julia","text":"","category":"section"},{"location":"man/julia/","page":"Usage within Julia","title":"Usage within Julia","text":"GhostKnockoffGWAS is a regular Julia package, which can be used directly within Julia for greater flexibility. To install it, execute the following in Julia","category":"page"},{"location":"man/julia/","page":"Usage within Julia","title":"Usage within Julia","text":"using Pkg\nPkg.add(url=\"https://github.com/biona001/libcxxwrap_julia_jll.jl\")\nPkg.add(url=\"https://github.com/biona001/ghostbasil_jll.jl\")\nPkg.add(url=\"https://github.com/biona001/Ghostbasil.jl\")\nPkg.add(url=\"https://github.com/biona001/GhostKnockoffGWAS\")","category":"page"},{"location":"man/julia/","page":"Usage within Julia","title":"Usage within Julia","text":"warning: Warning\nThis package currently only works on Julia 1.8.x and 1.9.x. If you need it to work on a different Julia version, let us know by filing an issue on Github. ","category":"page"},{"location":"man/julia/#Usage-example","page":"Usage within Julia","title":"Usage example","text":"","category":"section"},{"location":"man/julia/","page":"Usage within Julia","title":"Usage within Julia","text":"The following example performs summary-statistics GWAS under the GhostKnockoff framework.","category":"page"},{"location":"man/julia/","page":"Usage within Julia","title":"Usage within Julia","text":"using GhostKnockoffGWAS\n\n# file paths and directories\nLD_files = \"/home/groups/sabatti/.julia/dev/GhostKnockoffGWAS/data/EUR\"\nzfile = \"/home/groups/sabatti/.julia/dev/GhostKnockoffGWAS/data/AD_Zscores_Meta_modified.txt\"\noutdir = \"/home/groups/sabatti/.julia/dev/GhostKnockoffGWAS/data\"\n\n# specify sample size and human genome build\nN = 506200\nhg_build = 38\n\n# read Z-scores using built-in function read_zscores\nz, chr, pos, effect_allele, non_effect_allele = GhostKnockoffGWAS.read_zscores(zfile)\n\n# run analysis\n@time ghostknockoffgwas(LD_files, z, chr, pos, effect_allele, \n    non_effect_allele, N, hg_build, outdir, outname=\"test_alzheimers_meta\")","category":"page"},{"location":"man/julia/#Function-API","page":"Usage within Julia","title":"Function API","text":"","category":"section"},{"location":"man/julia/","page":"Usage within Julia","title":"Usage within Julia","text":"ghostknockoffgwas\nread_zscores","category":"page"},{"location":"man/julia/#GhostKnockoffGWAS.ghostknockoffgwas","page":"Usage within Julia","title":"GhostKnockoffGWAS.ghostknockoffgwas","text":"ghostknockoffgwas(LD_files::String, z::Vector{Float64}, chr::Vector{Int}, \n    effect_allele::Vector{String}, non_effect_allele::Vector{String}, N::Int,\n    hg_build::Int, outdir::String; [outname=\"result\"], [seed=2023], \n    [target_chrs=1:22], [A_scaling_factor = 0.01], [kappa=0.6], \n    [LD_shrinkage=false], [target_fdrs=0.01:0.01:0.2], [verbose=true], \n    [skip_shrinkage_check=false])\n\nRuns the main GhostKnockoffGWAS pipeline on the Z scores in z using  pre-computed knockoff data in LD_files. \n\nInputs\n\nLD_files: Directory that stores pre-computed knockoff results\nz: Vector of Z scores\nchr: Chromosome of each Z score (cannot be X/Y/M chromosomes)\npos: Position of each Z score (specify hg build with hg_build)\neffect_allele: Effect allele of Z score (i.e. ALT)\nnon_effect_allele: Non-effect allele of Z score (i.e. REF)\nN: sample size of original study\nhg_build: Human genome build (must be 19 or 38)\noutdir: output directory, which must exist. We will output 2 files, one    containing the full analysis results, as well as a summary file. \n\nOptional inputs\n\nseed: Random seed for reproducibility (default = 2023)\ntarget_chrs: Target chromosomes to analyze. For example, one can specify   target_chrs = 22 to only analyze 1 chromosome, or target_chrs = [1, 2]   to only analyze 2 chromosomes (default = sort!(unique(chr))).\nA_scaling_factor: The scaling factor for A = [X X̃]'*[X X̃] for improving   numerical stability. Scaling proceeds by adding A_scaling_factor*I to A   (default = 0.01). \nkappa: A constant between 0 and 1 for tuning Lasso's lambda path. Larger   value forces earlier exit in Lasso lambda path, resulting in stronger    shrinkage. See the \"lasso-min\" method of \"Controlled Variable Selection from   Summary Statistics Only? A Solution via GhostKnockoffs and Penalized    Regression\" by Chen et al (default 0.6).\nLD_shrinkage: Whether to perform shrinkage to LD and S matrices following   method in SuSiE paper (i.e. eq 24 of \"Fine-mapping from summary data with    the “Sum of Single Effects” model\" by Zou et al). If false, we will still   compute the shrinkage level, but it will not be used to adjust the LD   matrices (defaultfalse`). \ntarget_fdrs: Default target FDR levels (default = 0.01:0.01:0.2)\nverbose: Whether to print progress and informative intermediate results (   default = true)\nskip_shrinkage_check: Forces a result output even if there is a high   estimated LD shrinkage by SuSiE's method (default = false)\n\nOutput\n\nBy default we output 2 files into outdir\n\nA knockoff statistics file where each SNP occupies a row and the columns include    various SNP attributes include rsid, AF, chr, pos, zscores...etc. The    columns selected_fdr_FDR indicates whether the variant was ultimately   selected under the false discovery rate threshold of FDR.\nA summary statistics file. The first dozens of rows print, for each false    discovery rate threshold FDR, the knockoff threshold τ̂ and the number of   groups that pass this threshold. The next couple of lines print some    parameters used in the knockoff analysis, as well as some timing results. \n\n\n\n\n\n","category":"function"},{"location":"man/julia/#GhostKnockoffGWAS.read_zscores","page":"Usage within Julia","title":"GhostKnockoffGWAS.read_zscores","text":"read_zscores(filepath::String)\n\nHelper function to read a Z-score file at filepath. This function is mainly  intended for Julia users running GhostKnockoffGWAS in the REPL.\n\nInput\n\nfilepath: Full file path to the Z-score file. First row must be a header   column with CHR, POS, REF, ALT, and Z. If the file contains these    information but has a different header name for them, use the optional input   arguments below. All other columns will be ignored.\n\nOptional inputs\n\nchr_col: An integer, specifying which column in filepath should be read as   CHR (by default we search for a header CHR)\npos_col: An integer, specifying which column in filepath should be read as    POS (by default we search for a header POS)\nref_col: An integer, specifying which column in filepath should be read as    REF (by default we search for a header REF)\nalt_col: An integer, specifying which column in filepath should be read as   ALT (by default we search for a header ALT)\nz_col: An integer, specifying which column in filepath should be read as Z   (by default we search for a header Z)\n\nOutput\n\nz: The Z scores stored in the Z column of filepath\nchr: The chromosome number stored in CHR column of filepath. Only integer   values are allowed.\npos: The position number stored in POS column of filepath.\neffect_allele: The allele stored in ALT column of filepath.\nnon_effect_allele: The allele stored in REF column of filepath.\n\n\n\n\n\n","category":"function"},{"location":"man/julia/#Compiling-the-binaries","page":"Usage within Julia","title":"Compiling the binaries","text":"","category":"section"},{"location":"man/julia/","page":"Usage within Julia","title":"Usage within Julia","text":"Make sure GhostKnockoffGWAS is installed within Julia. \ndev the package via","category":"page"},{"location":"man/julia/","page":"Usage within Julia","title":"Usage within Julia","text":"]dev GhostKnockoffGWAS","category":"page"},{"location":"man/julia/","page":"Usage within Julia","title":"Usage within Julia","text":"compile using PackageCompiler.jl","category":"page"},{"location":"man/julia/","page":"Usage within Julia","title":"Usage within Julia","text":"using PackageCompiler, GhostKnockoffGWAS\nsrc = normpath(pathof(GhostKnockoffGWAS), \"../..\")\ndes = normpath(pathof(GhostKnockoffGWAS), \"../../app_linux_x86\")\nprecompile_script = normpath(pathof(GhostKnockoffGWAS), \"../precompile.jl\")\n@time create_app(src, des, \n    include_lazy_artifacts=true, \n    force=true, \n    precompile_execution_file=precompile_script\n)","category":"page"},{"location":"man/julia/","page":"Usage within Julia","title":"Usage within Julia","text":"The last step takes 1-2 hours. ","category":"page"},{"location":"man/video/#Video-Tutorials","page":"Video Tutorials","title":"Video Tutorials","text":"","category":"section"},{"location":"man/video/","page":"Video Tutorials","title":"Video Tutorials","text":"Coming soon","category":"page"},{"location":"man/video/#Installation","page":"Video Tutorials","title":"Installation","text":"","category":"section"},{"location":"man/video/","page":"Video Tutorials","title":"Video Tutorials","text":"","category":"page"},{"location":"man/video/#Running-the-analysis","page":"Video Tutorials","title":"Running the analysis","text":"","category":"section"},{"location":"man/video/","page":"Video Tutorials","title":"Video Tutorials","text":"","category":"page"},{"location":"man/video/#Interpreting-the-result","page":"Video Tutorials","title":"Interpreting the result","text":"","category":"section"},{"location":"man/video/","page":"Video Tutorials","title":"Video Tutorials","text":"","category":"page"},{"location":"man/examples/#Detailed-Example","page":"Detailed Example","title":"Detailed Example","text":"","category":"section"},{"location":"man/examples/","page":"Detailed Example","title":"Detailed Example","text":"This page collect examples of running the ghost knockoff pipeline. We will cover topics such as installation, examining input data, running the software, and interpreting the output. ","category":"page"},{"location":"man/examples/#Step-1:-Download-pre-processed-LD-files-and-binary-executable","page":"Detailed Example","title":"Step 1: Download pre-processed LD files and binary executable","text":"","category":"section"},{"location":"man/examples/","page":"Detailed Example","title":"Detailed Example","text":"Proceed to the Downloads page and download (1) the software as well as (2) a pre-processed knockoff dataset suitable for your analysis. After unzipping, the executable will be located inside bin/GhostKnockoffGWAS. We recommend adding the folder containing the GhostKnockoffGWAS executable to PATH for easier access.","category":"page"},{"location":"man/examples/#Step-2:-Prepare-a-valid-Z-score-file","page":"Detailed Example","title":"Step 2: Prepare a valid Z score file","text":"","category":"section"},{"location":"man/examples/","page":"Detailed Example","title":"Detailed Example","text":"One needs a valid Z score file as input. If you would like to follow along with this tutorial, feel free to download this test data example_zfile.txt (4MB). The first few rows look like","category":"page"},{"location":"man/examples/","page":"Detailed Example","title":"Detailed Example","text":"$ head example_zfile.txt\n\nCHR\tPOS\tREF\tALT\tZ\n17\t150509\tT\tTA\t1.08773561923134\n17\t151035\tT\tC\t0.703898767202681\n17\t151041\tG\tA\t1.10771707088118\n17\t151872\tT\tC\t-0.299877259561085\n17\t152087\tC\tT\t-0.371627135786605\n17\t152104\tG\tA\t-0.28387322965385\n17\t152248\tG\tA\t0.901618600934489\n17\t152427\tG\tA\t1.10987516000804\n17\t152771\tA\tG\t0.708492545266136","category":"page"},{"location":"man/examples/","page":"Detailed Example","title":"Detailed Example","text":"The first row is a header row which includes CHR, POS, REF, ALT, Z. Other columns will be ignored. \nEach row is a different SNP and each column is separated by a tab (i.e. \\t character) or a comma","category":"page"},{"location":"man/examples/","page":"Detailed Example","title":"Detailed Example","text":"In this example","category":"page"},{"location":"man/examples/","page":"Detailed Example","title":"Detailed Example","text":"The POS field corresponds to hg38 positions. GhostKnockoffGWAS requires the position to be either hg19 or hg38.\nThe sample size used for generating this data is 506200. Thus one should specify --N 506200.","category":"page"},{"location":"man/examples/#Step-3:-Running-the-analysis","page":"Detailed Example","title":"Step 3: Running the analysis","text":"","category":"section"},{"location":"man/examples/","page":"Detailed Example","title":"Detailed Example","text":"To see a list of available arguments, execute GhostKnockoffGWAS --help. ","category":"page"},{"location":"man/examples/","page":"Detailed Example","title":"Detailed Example","text":"To run the example analysis, one can do","category":"page"},{"location":"man/examples/","page":"Detailed Example","title":"Detailed Example","text":"$ GhostKnockoffGWAS \\\n    --zfile example_zfile.txt \\\n    --LD-files EUR \\\n    --N 506200 \\\n    --genome-build 38 \\\n    --out example_output","category":"page"},{"location":"man/examples/","page":"Detailed Example","title":"Detailed Example","text":"Here is the expected output:","category":"page"},{"location":"man/examples/","page":"Detailed Example","title":"Detailed Example","text":"Welcome to GhostKnockoffGWAS analysis!\nYou have specified the following options:\nzfile           = /scratch/users/bbchu/GhostKnockoffGWAS/data/example_zfile.txt\nLD_files        = /scratch/users/bbchu/GhostKnockoffGWAS/data/EUR\nN (sample size) = 506200\nhg_build        = 38\noutdir          = /scratch/users/bbchu/GhostKnockoffGWAS/data/\noutfile         = /scratch/users/bbchu/GhostKnockoffGWAS/data/example_output\nseed            = 2023\nverbose         = true\n\n\ncount_matchable_snps processed chr 17, cumulative SNPs = 21136\nregion 1 / 47: chr 17, nz beta = 10, nsnps = 425, shrinkage = 0.0043\nregion 2 / 47: chr 17, nz beta = 18, nsnps = 319, shrinkage = 0.0326\nregion 3 / 47: chr 17, nz beta = 1, nsnps = 232, shrinkage = 0.0135\nregion 4 / 47: chr 17, nz beta = 10, nsnps = 303, shrinkage = 0.0\nregion 5 / 47: chr 17, nz beta = 7, nsnps = 401, shrinkage = 0.0331\nregion 6 / 47: chr 17, nz beta = 3, nsnps = 285, shrinkage = 0.0235\nregion 7 / 47: chr 17, nz beta = 14, nsnps = 453, shrinkage = 0.0855\nregion 8 / 47: chr 17, nz beta = 12, nsnps = 385, shrinkage = 0.0256\nregion 9 / 47: chr 17, nz beta = 15, nsnps = 584, shrinkage = 0.0077\nregion 10 / 47: chr 17, nz beta = 8, nsnps = 490, shrinkage = 0.0234\nregion 11 / 47: chr 17, nz beta = 17, nsnps = 320, shrinkage = 0.0215\nregion 12 / 47: chr 17, nz beta = 8, nsnps = 424, shrinkage = 0.0102\nregion 13 / 47: chr 17, nz beta = 12, nsnps = 492, shrinkage = 0.0151\nregion 14 / 47: chr 17, nz beta = 14, nsnps = 438, shrinkage = 0.0275\nregion 15 / 47: chr 17, nz beta = 12, nsnps = 522, shrinkage = 0.0042\nregion 16 / 47: chr 17, nz beta = 17, nsnps = 450, shrinkage = 0.0224\nregion 17 / 47: chr 17, nz beta = 10, nsnps = 386, shrinkage = 0.0038\nregion 18 / 47: chr 17, nz beta = 6, nsnps = 327, shrinkage = 0.0098\nregion 19 / 47: chr 17, nz beta = 12, nsnps = 333, shrinkage = 0.008\nregion 20 / 47: chr 17, nz beta = 15, nsnps = 257, shrinkage = 0.0101\nregion 21 / 47: chr 17, nz beta = 15, nsnps = 773, shrinkage = 0.3052\nregion 22 / 47: chr 17, nz beta = 21, nsnps = 364, shrinkage = 0.0269\nregion 23 / 47: chr 17, nz beta = 21, nsnps = 332, shrinkage = 0.0147\nregion 24 / 47: chr 17, nz beta = 31, nsnps = 656, shrinkage = 0.0211\nregion 25 / 47: chr 17, nz beta = 2, nsnps = 123, shrinkage = 0.0101\nregion 26 / 47: chr 17, nz beta = 3, nsnps = 177, shrinkage = 0.0109\nregion 27 / 47: chr 17, nz beta = 7, nsnps = 375, shrinkage = 0.0122\nregion 28 / 47: chr 17, nz beta = 13, nsnps = 472, shrinkage = 0.0437\nregion 29 / 47: chr 17, nz beta = 17, nsnps = 538, shrinkage = 0.0318\nregion 30 / 47: chr 17, nz beta = 12, nsnps = 555, shrinkage = 0.0184\nregion 31 / 47: chr 17, nz beta = 10, nsnps = 642, shrinkage = 0.0048\nregion 32 / 47: chr 17, nz beta = 4, nsnps = 286, shrinkage = 0.0123\nregion 33 / 47: chr 17, nz beta = 13, nsnps = 403, shrinkage = 0.0249\nregion 34 / 47: chr 17, nz beta = 5, nsnps = 278, shrinkage = 0.0082\nregion 35 / 47: chr 17, nz beta = 11, nsnps = 483, shrinkage = 0.0276\nregion 36 / 47: chr 17, nz beta = 35, nsnps = 800, shrinkage = 0.0181\nregion 37 / 47: chr 17, nz beta = 7, nsnps = 358, shrinkage = 0.0054\nregion 38 / 47: chr 17, nz beta = 32, nsnps = 1278, shrinkage = 0.004\nregion 39 / 47: chr 17, nz beta = 14, nsnps = 453, shrinkage = 0.0105\nregion 40 / 47: chr 17, nz beta = 10, nsnps = 341, shrinkage = 0.005\nregion 41 / 47: chr 17, nz beta = 14, nsnps = 731, shrinkage = 0.0104\nregion 42 / 47: chr 17, nz beta = 15, nsnps = 545, shrinkage = 0.0463\nregion 43 / 47: chr 17, nz beta = 7, nsnps = 575, shrinkage = 0.0093\nregion 44 / 47: chr 17, nz beta = 4, nsnps = 385, shrinkage = 0.0141\nregion 45 / 47: chr 17, nz beta = 9, nsnps = 354, shrinkage = 0.0083\nregion 46 / 47: chr 17, nz beta = 12, nsnps = 615, shrinkage = 0.0108\nregion 47 / 47: chr 17, nz beta = 7, nsnps = 418, shrinkage = 0.0251\nMatched 21136 SNPs with Z-scores to the reference panel\nMean LD shrinkage = 0.02387362024098241.\nDone! Result saved to /scratch/users/bbchu/GhostKnockoffGWAS/data/example_output. \nOverall runtime = 34.12649257 seconds, with \n   1.456621308 seconds spent on reading the Z score file\n   32.669871262 seconds spent on doing the analysis","category":"page"},{"location":"man/examples/","page":"Detailed Example","title":"Detailed Example","text":"Explanation for intermediate outputs:","category":"page"},{"location":"man/examples/","page":"Detailed Example","title":"Detailed Example","text":"GhostKnockoffGWAS first prints the user-specified parameters in the analysis. Verify that they are correct.\nNext we print the output of count_matchable_snps. It is essentially matching user supplied Z scores to the pre-computed knockoff data and counting how many SNPs can be matched. This information will be used to quantify the level shrinkage in Lasso regression. \nThen for each region, it will try to analyze the genome in quasi-independent regions, e.g. ","category":"page"},{"location":"man/examples/","page":"Detailed Example","title":"Detailed Example","text":"region 1 / 47: chr 17, nz beta = 10, nsnps = 425, shrinkage = 0.0043\nregion 2 / 47: chr 17, nz beta = 18, nsnps = 319, shrinkage = 0.0326\nregion 3 / 47: chr 17, nz beta = 1, nsnps = 232, shrinkage = 0.0135\n...","category":"page"},{"location":"man/examples/","page":"Detailed Example","title":"Detailed Example","text":"Here there are 47 regions in chromosome 17. For each region it prints the number of non-zero beta estimated in that region, the number of Z-scores that are present in that region, and finally the level of shrinkage. The shrinkage level is a number between 0 and 1. It quantifies how well the correlation matrices used in the analysis approximates the LD structure for the original GWAS study under the null (z = 0), see SuSiE paper equation 24 for details.","category":"page"},{"location":"man/examples/","page":"Detailed Example","title":"Detailed Example","text":"Finally, the program concludes by printing the number of Z scores successfully matched, the output path, as well as a rough estimate of runtime. In this simple example, the analysis finished in roughly half a minute. ","category":"page"},{"location":"man/examples/#Step-4:-Interpreting-the-result","page":"Detailed Example","title":"Step 4: Interpreting the result","text":"","category":"section"},{"location":"man/examples/","page":"Detailed Example","title":"Detailed Example","text":"If you are following along, GhostKnockoffGWAS should have produced 2 outputs","category":"page"},{"location":"man/examples/","page":"Detailed Example","title":"Detailed Example","text":"example_output_summary.txt\nexample_output.txt","category":"page"},{"location":"man/examples/#example_output_summary.txt","page":"Detailed Example","title":"example_output_summary.txt","text":"","category":"section"},{"location":"man/examples/","page":"Detailed Example","title":"Detailed Example","text":"This file contains broad summary of the analysis, as shown below","category":"page"},{"location":"man/examples/","page":"Detailed Example","title":"Detailed Example","text":"target_fdr_0.01,Inf\ntarget_fdr_0.01_num_selected,0\ntarget_fdr_0.02,Inf\ntarget_fdr_0.02_num_selected,0\ntarget_fdr_0.03,Inf\ntarget_fdr_0.03_num_selected,0\ntarget_fdr_0.04,Inf\ntarget_fdr_0.04_num_selected,0\ntarget_fdr_0.05,Inf\ntarget_fdr_0.05_num_selected,0\ntarget_fdr_0.06,Inf\ntarget_fdr_0.06_num_selected,0\ntarget_fdr_0.07,Inf\ntarget_fdr_0.07_num_selected,0\ntarget_fdr_0.08,Inf\ntarget_fdr_0.08_num_selected,0\ntarget_fdr_0.09,Inf\ntarget_fdr_0.09_num_selected,0\ntarget_fdr_0.1,0.0038835278195177795\ntarget_fdr_0.1_num_selected,4\ntarget_fdr_0.11,0.0037439278466356142\ntarget_fdr_0.11_num_selected,6\ntarget_fdr_0.12,0.0037439278466356142\ntarget_fdr_0.12_num_selected,6\ntarget_fdr_0.13,0.0037439278466356142\ntarget_fdr_0.13_num_selected,6\ntarget_fdr_0.14,0.0031012282968098537\ntarget_fdr_0.14_num_selected,6\ntarget_fdr_0.15,0.0031012282968098537\ntarget_fdr_0.15_num_selected,6\ntarget_fdr_0.16,0.0031012282968098537\ntarget_fdr_0.16_num_selected,6\ntarget_fdr_0.17,0.002768189835339677\ntarget_fdr_0.17_num_selected,6\ntarget_fdr_0.18,0.002768189835339677\ntarget_fdr_0.18_num_selected,6\ntarget_fdr_0.19,0.002768189835339677\ntarget_fdr_0.19_num_selected,6\ntarget_fdr_0.2,0.0022878815488677467\ntarget_fdr_0.2_num_selected,7\nm,5\nnregions,47\nnsnps,21136\nlasso_lambda,0.0035656428122281454\nmean_LD_shrinkage,0.02387362024098241\nimport_time,2.9585762090000007\nsample_knockoff_time,8.064913196999997\nghostbasil_time,0.461628368\nknockoff_filter_time,2.326016636\ntotal_time,25.699404001235962\nsample_knockoff_time_t21,2.9308446070000005\nsample_knockoff_time_t22,1.398813931\nsample_knockoff_time_t23,0.9110162740000001\nsample_knockoff_time_t24,2.6240137139999993","category":"page"},{"location":"man/examples/","page":"Detailed Example","title":"Detailed Example","text":"The first ~40 rows indicate the number of unique discoveries given by GhostKnockoffGWAS, for different target FDR levels. For example, when target textFDR = 01, there are 4 unique discoveries and the knockoff threshold is hattau = 000388. According to the knockoff procedure, these discoveries are conditionally independent, although one can apply a post-processing step to further count the number of independent discoveries. \nThe next few rows contain parameters used in the analysis, as well as timing results. \nThe most important parameter corresponds to the value of mean_LD_shrinkage, here it is 0023873. As discussed above, this value quantifies how well the correlation matrices used in the analysis approximates the LD structure for the original GWAS study. A value close to 0 is good, while larger values indicate deviation. GhostKnokcoffGWAS automatically terminates when this value exceeds a certain threshold.","category":"page"},{"location":"man/examples/#example_output.txt","page":"Detailed Example","title":"example_output.txt","text":"","category":"section"},{"location":"man/examples/","page":"Detailed Example","title":"Detailed Example","text":"This is a comma-separated file that contains the full knockoff analysis output. The first 5 rows are shown:","category":"page"},{"location":"man/examples/","page":"Detailed Example","title":"Detailed Example","text":"$ head -5 example_output.txt\nrsid,AF,chr,ref,alt,pos_hg19,pos_hg38,group,zscores,lasso_beta,W,kappa,tau,pvals,selected_fdr0.01,selected_fdr0.02,selected_fdr0.03,selected_fdr0.04,selected_fdr0.05,selected_fdr0.06,selected_fdr0.07,selected_fdr0.08,selected_fdr0.09,selected_fdr0.1,selected_fdr0.11,selected_fdr0.12,selected_fdr0.13,selected_fdr0.14,selected_fdr0.15,selected_fdr0.16,selected_fdr0.17,selected_fdr0.18,selected_fdr0.19,selected_fdr0.2\nrs2294076,0.74445,17,A,G,6157,156366,chr17_start56_end1172398_group1_0,0.398036369392557,0.0,0.0,0.0,0.0,0.6906033770337676,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0\nrs2396789,0.90858,17,T,C,8547,158756,chr17_start56_end1172398_group1_0,0.405389455204145,0.0,0.0,0.0,0.0,0.6851912607868653,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0\nrs36068254,0.76068,17,A,G,10583,160792,chr17_start56_end1172398_group2_0,0.454143632070033,0.0,0.0,0.0,0.0,0.6497254507764232,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0\nrs6565705,0.7967,17,G,A,13905,164114,chr17_start56_end1172398_group1_0,0.654603172923188,0.0,0.0,0.0,0.0,0.5127232807057284,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0","category":"page"},{"location":"man/examples/","page":"Detailed Example","title":"Detailed Example","text":"The first row is a header row. Each proceeding row corresponds to a SNP that was used in the analysis. ","category":"page"},{"location":"man/examples/","page":"Detailed Example","title":"Detailed Example","text":"selected_fdr* columns: these inform whether the variable is selected. Its values are 0 (indicating the SNP does not belong to a group that has been selected) or 1 (this SNP has been selected, along with those in the same group ).\ngroup column: defines group membership. Note that in GhostKnockoffGWAS, false discovery rate (FDR) is guaranteed at the group level, that is, the expected number of falsely discovered groups is less than the target FDR level.\nAF column: stands for alternate-allele-frequency. \nlasso_beta: This is the Lasso's estimated effect size for each SNP conditional on the knockoffs. \nW, kappa, tau: these are knockoff statistics computed from the analysis, please refer to our paper for more detail. \nOther columns such as rsid,chr,ref...etc should be self-explanatory.","category":"page"},{"location":"#GWAS-summary-statistics-analysis-via-Knockoff-filter","page":"Home","title":"GWAS summary statistics analysis via Knockoff-filter","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This is package for performing knockoff-based analysis of GWAS summary statistics. The knockoff-filter finds conditionally independent discoveries while controlling the FDR (false discovery rate) to any specified level. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: cover)","category":"page"},{"location":"","page":"Home","title":"Home","text":"warning: Warning\nThis package currently only works on Linux platforms with aarch64 or x86_64 CPUs. We plan to support mac (x86_64 and aarch64) in the near future, but not for windows. ","category":"page"},{"location":"man/zfile/#Acceptable-Z-scores-file-format","page":"Acceptable Z-scores file","title":"Acceptable Z-scores file format","text":"","category":"section"},{"location":"man/zfile/","page":"Acceptable Z-scores file","title":"Acceptable Z-scores file","text":"The Z score file should satisfy the following requirements:","category":"page"},{"location":"man/zfile/","page":"Acceptable Z-scores file","title":"Acceptable Z-scores file","text":"It is a comma- or tab-separated file (.gz compressed is acceptable)\nThe first row should be a header line, and every row after the first will be treated as a different SNP. \nThe header line should include CHR, POS, REF, ALT, and Z. The ALT allele will be treated as the effect allele and REF be treated as non-effect allele. The POS (position) field of each variant must be from HG19 or HG38, which must be specified by the --genome-build argument. CHR/POS/REF/ALT fields cannot have missing values. Missing Z scores can be specified as NaN or as an empty cell.","category":"page"},{"location":"man/zfile/","page":"Acceptable Z-scores file","title":"Acceptable Z-scores file","text":"Here is a minimal example with 10 Z scores","category":"page"},{"location":"man/zfile/","page":"Acceptable Z-scores file","title":"Acceptable Z-scores file","text":"CHR\tPOS\tREF\tALT\tZ\n17\t150509\tT\tTA\t1.08773561923134\n17\t151035\tT\tC\t0.703898767202681\n17\t151041\tG\tA\tNaN\n17\t151872\tT\tC\t-0.299877259561085\n17\t152087\tC\tT\t-0.371627135786605\n17\t152104\tG\tA\t-0.28387322965385\n17\t152248\tG\tA\t0.901618600934489\n17\t152427\tG\tA\t1.10987516000804\n17\t152771\tA\tG\t0.708492545266136","category":"page"},{"location":"man/zfile/#Requirements-on-the-input-Z-scores","page":"Acceptable Z-scores file","title":"Requirements on the input Z-scores","text":"","category":"section"},{"location":"man/zfile/","page":"Acceptable Z-scores file","title":"Acceptable Z-scores file","text":"The input Z-scores (or p-values) must be valid Z-scores, i.e. each has N(0 1) distribution under the null. This paper shows that input Z-scores can be calculated from various marginal association tests, such as ","category":"page"},{"location":"man/zfile/","page":"Acceptable Z-scores file","title":"Acceptable Z-scores file","text":"generalized linear mixed effect model to account for sample relatedness\nsaddle point approximation for extreme case-control imbalance\nmeta-analysis that aggregates multiple studies.","category":"page"},{"location":"man/zfile/#Obtaining-Z-scores-from-p-values,-odds-ratios,-or-equivalent","page":"Acceptable Z-scores file","title":"Obtaining Z scores from p-values, odds ratios, or equivalent","text":"","category":"section"},{"location":"man/zfile/","page":"Acceptable Z-scores file","title":"Acceptable Z-scores file","text":"If you have p-values, effect sizes, odds ratios...etc but not Z scores, you can convert them into Z score, for example by following the Notes on computing Z-scores of this blog post. ","category":"page"}]
}
